stages:
  - lint

variables:
  SHELLCHECK_IMAGE: koalaman/shellcheck-alpine:latest
  SHFMT_IMAGE: mvdan/shfmt:latest

cache:
  paths:
    - .cache/shellcheck/

before_script:
  - mkdir -p .cache/shellcheck

shellcheck:
  stage: lint
  image: $SHELLCHECK_IMAGE
  script:
    - echo "Запуск ShellCheck"
    - shellcheck -x pg_backup.sh
    - echo "ShellCheck пройден"
  
  artifacts:
    reports:
      codequality: gl-shellcheck.json
  allow_failure: false
  only:
    - merge_requests
    - main

validate_syntax:
  stage: lint
  image: bash:5.2
  script:
    - echo "Проверка синтаксиса скрипта"
    - bash -n pg_backup.sh
    - echo "Синтаксис корректен"
  
  only:
    - merge_requests
    - main

code_formatting:
  stage: lint
  image: $SHFMT_IMAGE
  script:
    - echo "Проверка форматирования кода"
    - shfmt -i 2 -ci -d pg_backup.sh || echo "Найдены отклонения от стиля кода"
    - echo "Проверка форматирования завершена"
  
  allow_failure: true
  only:
    - merge_requests

security_scan:
  stage: lint
  image: $SHELLCHECK_IMAGE
  script:
    - |
      echo "Базовая проверка безопасности"
      if grep -E "password.*=.*['\\\"].*" pg_backup.sh; then
        echo "Возможны хардкоженные пароли!"
        exit 1
      fi
      if grep -E "rm.*-rf.*/.*" pg_backup.sh; then
        echo "Обнаружены опасные операции удаления!"
      fi
      
      echo "Базовая проверка безопасности пройдена"
  
  allow_failure: false
  only:
    - merge_requests

lint_report:
  stage: lint
  image: alpine:latest
  script:
    - echo "Линтинг завершен"
    - echo "Скрипт прошел все проверки"
  dependencies: []
  only:
    - merge_requests
    - main
  when: always
